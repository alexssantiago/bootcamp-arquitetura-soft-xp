name: xpe-arq-desafio-final

version: "3.9"

services:
  api:
    container_name: api
    build:
      context: ../src
      dockerfile: ../devops/Dockerfile
    environment:
      ASPNETCORE_URLS: http://+:8080
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__Default: "server=db;port=3306;database=xpe_arq_desafio_final;user=${MYSQL_USER};password=${MYSQL_PASSWORD};TreatTinyAsBoolean=false;AllowUserVariables=True;DefaultCommandTimeout=60;ConnectionTimeout=15"
      Redis__Configuration: "cache:6379"
      ConnectionStrings__Seq: "http://seq:80"
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    networks:
      - backend

  db:
    image: mysql:8.0.37
    container_name: mysql
    restart: unless-stopped
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: xpe_arq_desafio_final
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      TZ: America/Sao_Paulo
    volumes:
      - db_data:/var/lib/mysql
      - ./initdb:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: >
        bash -lc 'mysql --protocol=TCP -h 127.0.0.1 -uroot -p"$$MYSQL_ROOT_PASSWORD" -e "SELECT 1" >/dev/null 2>&1'
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 120s
    networks:
      - backend
    ports:
      - "3306:3306"      

  cache:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - backend
    ports:
      - "6379:6379"

  seq:
    image: datalust/seq:latest
    container_name: seq
    restart: unless-stopped
    ports:
      - "5341:80"
    environment:
      - ACCEPT_EULA=Y
      - SEQ_FIRSTRUN_NOAUTHENTICATION=true
    volumes:
      - seq_data:/data
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost/api/health"]
      interval: 10s
      timeout: 5s
      retries: 12

volumes:
  db_data:
  redis_data:
  seq_data:

networks:
  backend:
    driver: bridge